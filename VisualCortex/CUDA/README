This is a planned addition to the visual cortex part of the project..
For the current GuarddoG ( 2008-2012 ) that works on 320x240 images , CUDA code should actually be slower than CPU code ( with its many years of optimization )

For example CPU code has this kind of performance on an Intel i7 ( generated issuing HYPERVISOR STATISTICS  from the commandline of GuarddoG )
-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-
Visual Cortex HyperVisor status -=-=-=-=-=-=-=-=-=-=-=-=-=-
FUNCTION             TIME  IN  MICROSECONDS  SAMPLES! !
 MEMCPY TO REGISTER , AVERAGE 49 , LAST 46 , SAMPLES 549 
 CALIBRATION , AVERAGE 0 , LAST 0 , SAMPLES 0 
 BLUR , AVERAGE 703 , LAST 706 , SAMPLES 158 
 FIRST DERIV. , AVERAGE 682 , LAST 687 , SAMPLES 158 
 SECOND DERIV. , AVERAGE 1008 , LAST 1036 , SAMPLES 158 
 PIXEL OV THR , AVERAGE 0 , LAST 0 , SAMPLES 0 
 MOVEMENT RAW , AVERAGE 1086 , LAST 1010 , SAMPLES 548 
 COMPRESS IMAGE , AVERAGE 408 , LAST 404 , SAMPLES 939 
 Gauss+Sob+Sec+... , AVERAGE 2673 , LAST 2677 , SAMPLES 158 
 DETECT FACES , AVERAGE 42458 , LAST 42662 , SAMPLES 16 
 FIND CORNERS , AVERAGE 164122 , LAST 161967 , SAMPLES 4 
 TRACK CORNERS , AVERAGE 4391 , LAST 4737 , SAMPLES 115 
 DEPTH MAP , AVERAGE 252809 , LAST 168784 , SAMPLES 2 
 CAMERA POSE TR , AVERAGE 1253 , LAST 888 , SAMPLES 546 

     -=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-
PER FRAME , ALL TIMES ARE IN ! ! MILLISECONDS ! !
From GUI : Hypervisor Statistics  ! 

My DepthMap could probably benefit a lot from the parallel cuda processing  since it takes a very large portion of the CPU time..
But all of these numbers will not scale well if we increase our working size to  say 1920x1080
In such high resolution scenarios , cuda will certainly be better so this is the target of this part of the library.. 