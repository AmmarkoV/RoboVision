This is a planned addition to the visual cortex part of the project..
For the current GuarddoG ( 2008-2012 ) that works on 320x240 images , CUDA code should actually be slower than CPU code ( with its many years of optimization )

For example CPU code has this kind of performance on an Intel i7 ( generated issuing HYPERVISOR STATISTICS  from the commandline of GuarddoG )
-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-
Visual Cortex HyperVisor status -=-=-=-=-=-=-=-=-=-=-=-=-=-
FUNCTION             TIME  IN  MICROSECONDS  SAMPLES! ! 
 MEMCPY TO REGISTER , AVERAGE 45 , LAST 48 , SAMPLES 5226 
 CALIBRATION , AVERAGE 0 , LAST 0 , SAMPLES 0 
 BLUR , AVERAGE 700 , LAST 684 , SAMPLES 470 
 FIRST DERIV. , AVERAGE 726 , LAST 688 , SAMPLES 470 
 SECOND DERIV. , AVERAGE 918 , LAST 847 , SAMPLES 470 
 PIXEL OV THR , AVERAGE 0 , LAST 0 , SAMPLES 0 
 MOVEMENT RAW , AVERAGE 1224 , LAST 1029 , SAMPLES 542 
 COMPRESS IMAGE , AVERAGE 445 , LAST 449 , SAMPLES 1182 
 Gauss+Sob+Sec+... , AVERAGE 2625 , LAST 2531 , SAMPLES 297 
 DETECT FACES , AVERAGE 37215 , LAST 32426 , SAMPLES 14 
 FIND CORNERS , AVERAGE 21562 , LAST 17560 , SAMPLES 29 
 TRACK CORNERS , AVERAGE 1692 , LAST 1056 , SAMPLES 422 
 DEPTH MAP , AVERAGE 68773 , LAST 77184 , SAMPLES 13 
 CAMERA POSE TR , AVERAGE 1257 , LAST 563 , SAMPLES 604 

     -=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-
PER FRAME , ALL TIMES ARE IN ! ! MILLISECONDS ! !
From GUI : Hypervisor Statistics  ! 

My DepthMap could probably benefit a lot from the parallel cuda processing  since it takes a very large portion of the CPU time..
But all of these numbers will not scale well if we increase our working size to  say 1920x1080
In such high resolution scenarios , cuda will certainly be better so this is the target of this part of the library.. 